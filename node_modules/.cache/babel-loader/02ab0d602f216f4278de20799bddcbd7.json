{"ast":null,"code":"import _defineProperty from \"/home/codebrahma/Documents/Projects/messages/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { takeLatest, put, delay, takeEvery, call } from \"redux-saga/effects\";\nimport { AUTH_FAIL, AUTH_SUCCESS, AUTH_VALIDATION, REGISTER, UPDATE_MESSAGES, UPDATE_MESSAGE, GET_DATA } from \"../actions/actions\";\nimport * as firebase from \"firebase\";\nexport function* register(action) {\n  yield delay(1000);\n  const _action$payload = action.payload,\n        email = _action$payload.email,\n        password = _action$payload.password;\n  console.log(\"Register details : \".concat(email, \",\").concat(password));\n}\nexport function* update(action) {\n  console.log(\"Message updated\");\n  console.log(action);\n  const user1 = action.data.name;\n  console.log({\n    [user1]: {\n      email: action.data.email,\n      name: user1,\n      message: action.data.message\n    }\n  });\n  firebase.database().ref(\"details\").push({\n    [user1]: {\n      email: action.data.email,\n      name: user1,\n      message: action.data.message\n    }\n  });\n  let data;\n  const recentPostsRef = firebase.database().ref(\"/details\");\n  yield recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  yield put({\n    data,\n    type: UPDATE_MESSAGES\n  });\n}\nexport function* validateLogin(action) {\n  const _action$payload2 = action.payload,\n        email = _action$payload2.email,\n        password = _action$payload2.password;\n  console.log(email, password);\n  let data;\n  let recentPostsRef = firebase.database().ref(\"/details\");\n  recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  let result;\n  firebase.auth().signInWithEmailAndPassword(email, password).then(user => {\n    console.log(\"success\");\n    return {\n      data,\n      type: AUTH_SUCCESS\n    };\n  }).then(data => console.log(data)).catch(err => {\n    console.log(\"error\");\n    result = _objectSpread({}, action, {\n      type: AUTH_FAIL\n    });\n  });\n  console.log(result); // if (email === \"a@b.c\" && password === \"123\") {\n  //   console.log(\"AUTH_success \");\n  //   var recentPostsRef = firebase.database().ref(\"/details\");\n  //   yield recentPostsRef.once(\"value\").then(snapshot => {\n  //     data = snapshot.val();\n  //   });\n  //   yield put({ data, type: AUTH_SUCCESS });\n  // } else yield put({ ...action, type: AUTH_FAIL });\n}\nexport default function* rootSaga() {\n  yield takeLatest(AUTH_VALIDATION, validateLogin);\n  yield takeLatest(UPDATE_MESSAGE, update);\n  yield takeLatest(REGISTER, register);\n}","map":{"version":3,"sources":["/home/codebrahma/Documents/Projects/messages/src/sagas/sagas.js"],"names":["takeLatest","put","delay","takeEvery","call","AUTH_FAIL","AUTH_SUCCESS","AUTH_VALIDATION","REGISTER","UPDATE_MESSAGES","UPDATE_MESSAGE","GET_DATA","firebase","register","action","payload","email","password","console","log","update","user1","data","name","message","database","ref","push","recentPostsRef","once","then","snapshot","val","type","validateLogin","result","auth","signInWithEmailAndPassword","user","catch","err","rootSaga"],"mappings":"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","sourcesContent":["import { takeLatest, put, delay, takeEvery, call } from \"redux-saga/effects\";\nimport {\n  AUTH_FAIL,\n  AUTH_SUCCESS,\n  AUTH_VALIDATION,\n  REGISTER,\n  UPDATE_MESSAGES,\n  UPDATE_MESSAGE,\n  GET_DATA\n} from \"../actions/actions\";\n\nimport * as firebase from \"firebase\";\n\nexport function* register(action) {\n  yield delay(1000);\n  const { email, password } = action.payload;\n  console.log(`Register details : ${email},${password}`);\n}\n\nexport function* update(action) {\n  console.log(\"Message updated\");\n  console.log(action);\n  const user1 = action.data.name;\n  console.log({\n    [user1]: {\n      email: action.data.email,\n      name: user1,\n      message: action.data.message\n    }\n  });\n\n  firebase\n    .database()\n    .ref(\"details\")\n    .push({\n      [user1]: {\n        email: action.data.email,\n        name: user1,\n        message: action.data.message\n      }\n    });\n\n  let data;\n  const recentPostsRef = firebase.database().ref(\"/details\");\n  yield recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  yield put({ data, type: UPDATE_MESSAGES });\n}\n\nexport function* validateLogin(action) {\n  const { email, password } = action.payload;\n  console.log(email, password);\n  let data;\n  let recentPostsRef = firebase.database().ref(\"/details\");\n  recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  let result;\n  firebase\n    .auth()\n    .signInWithEmailAndPassword(email, password)\n    .then(user => {\n      console.log(\"success\");\n      return { data, type: AUTH_SUCCESS };\n    })\n    .then(data => console.log(data))\n    .catch(err => {\n      console.log(\"error\");\n      result = { ...action, type: AUTH_FAIL };\n    });\n  console.log(result);\n\n  // if (email === \"a@b.c\" && password === \"123\") {\n  //   console.log(\"AUTH_success \");\n  //   var recentPostsRef = firebase.database().ref(\"/details\");\n  //   yield recentPostsRef.once(\"value\").then(snapshot => {\n  //     data = snapshot.val();\n  //   });\n  //   yield put({ data, type: AUTH_SUCCESS });\n  // } else yield put({ ...action, type: AUTH_FAIL });\n}\n\nexport default function* rootSaga() {\n  yield takeLatest(AUTH_VALIDATION, validateLogin);\n  yield takeLatest(UPDATE_MESSAGE, update);\n  yield takeLatest(REGISTER, register);\n}\n"]},"metadata":{},"sourceType":"module"}