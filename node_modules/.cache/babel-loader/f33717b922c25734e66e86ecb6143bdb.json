{"ast":null,"code":"import { takeLatest, put, delay, takeEvery, call } from \"redux-saga/effects\";\nimport { AUTH_FAIL, AUTH_SUCCESS, AUTH_VALIDATION, REGISTER, UPDATE_MESSAGES, UPDATE_MESSAGE, GET_DATA } from \"../actions/actions\";\nimport * as firebase from \"firebase\";\nexport function* register(action) {\n  yield delay(1000);\n  const _action$payload = action.payload,\n        email = _action$payload.email,\n        password = _action$payload.password;\n  console.log(\"Register details : \".concat(email, \",\").concat(password));\n}\nexport function* update(action) {\n  console.log(\"Message updated\");\n  console.log(action);\n  const user1 = action.data.name;\n  console.log({\n    [user1]: {\n      email: action.data.email,\n      name: user1,\n      message: action.data.message\n    }\n  });\n  firebase.database().ref(\"details\").push({\n    [user1]: {\n      email: action.data.email,\n      name: user1,\n      message: action.data.message\n    }\n  });\n  let data;\n  const recentPostsRef = firebase.database().ref(\"/details\");\n  yield recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  yield put({\n    data,\n    type: UPDATE_MESSAGES\n  });\n}\n\nasync function authenticateLogin(email, password) {\n  console.log(email, password);\n  return await firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nfunction* validateLogin(action) {\n  const _action$payload2 = action.payload,\n        email = _action$payload2.email,\n        password = _action$payload2.password;\n  let data;\n\n  try {\n    yield call(authenticateLogin, email, password);\n    let recentPostsRef = firebase.database().ref(\"/details\");\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    yield put({\n      data,\n      type: AUTH_SUCCESS\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: AUTH_FAIL\n    });\n  }\n  /*if () {\n    console.log(\"AUTH_SUCCESS \");\n    let recentPostsRef = firebase.database().ref(\"/details\");\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    yield put({ data, type: AUTH_SUCCESS });\n  } else yield put({ ...action, type: AUTH_FAIL });\n  */\n\n}\n\nexport default function* rootSaga() {\n  yield takeLatest(AUTH_VALIDATION, validateLogin);\n  yield takeLatest(UPDATE_MESSAGE, update);\n  yield takeLatest(REGISTER, register);\n}","map":{"version":3,"sources":["/home/codebrahma/Documents/Projects/messages/src/sagas/sagas.js"],"names":["takeLatest","put","delay","takeEvery","call","AUTH_FAIL","AUTH_SUCCESS","AUTH_VALIDATION","REGISTER","UPDATE_MESSAGES","UPDATE_MESSAGE","GET_DATA","firebase","register","action","payload","email","password","console","log","update","user1","data","name","message","database","ref","push","recentPostsRef","once","then","snapshot","val","type","authenticateLogin","auth","signInWithEmailAndPassword","validateLogin","e","rootSaga"],"mappings":"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","sourcesContent":["import { takeLatest, put, delay, takeEvery, call } from \"redux-saga/effects\";\nimport {\n  AUTH_FAIL,\n  AUTH_SUCCESS,\n  AUTH_VALIDATION,\n  REGISTER,\n  UPDATE_MESSAGES,\n  UPDATE_MESSAGE,\n  GET_DATA\n} from \"../actions/actions\";\n\nimport * as firebase from \"firebase\";\n\nexport function* register(action) {\n  yield delay(1000);\n  const { email, password } = action.payload;\n  console.log(`Register details : ${email},${password}`);\n}\n\nexport function* update(action) {\n  console.log(\"Message updated\");\n  console.log(action);\n  const user1 = action.data.name;\n  console.log({\n    [user1]: {\n      email: action.data.email,\n      name: user1,\n      message: action.data.message\n    }\n  });\n\n  firebase\n    .database()\n    .ref(\"details\")\n    .push({\n      [user1]: {\n        email: action.data.email,\n        name: user1,\n        message: action.data.message\n      }\n    });\n\n  let data;\n  const recentPostsRef = firebase.database().ref(\"/details\");\n  yield recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  yield put({ data, type: UPDATE_MESSAGES });\n}\n\nasync function authenticateLogin(email, password) {\n  console.log(email, password);\n  return await firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nfunction* validateLogin(action) {\n  const { email, password } = action.payload;\n  let data;\n  try {\n    yield call(authenticateLogin, email, password);\n    let recentPostsRef = firebase.database().ref(\"/details\");\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    yield put({ data, type: AUTH_SUCCESS });\n  } catch (e) {\n    console.log(e);\n    yield put({ type: AUTH_FAIL });\n  }\n\n  /*if () {\n    console.log(\"AUTH_SUCCESS \");\n    let recentPostsRef = firebase.database().ref(\"/details\");\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    yield put({ data, type: AUTH_SUCCESS });\n  } else yield put({ ...action, type: AUTH_FAIL });\n  */\n}\n\nexport default function* rootSaga() {\n  yield takeLatest(AUTH_VALIDATION, validateLogin);\n  yield takeLatest(UPDATE_MESSAGE, update);\n  yield takeLatest(REGISTER, register);\n}\n"]},"metadata":{},"sourceType":"module"}