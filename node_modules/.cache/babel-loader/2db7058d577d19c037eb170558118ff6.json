{"ast":null,"code":"import firebase from \"firebase\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport { takeLatest, put, call } from \"redux-saga/effects\";\nimport { AUTH_FAIL, AUTH_SUCCESS, AUTH_VALIDATION, REGISTER, UPDATE_MESSAGES, UPDATE_MESSAGE, LOADING, STOP_LOADING } from \"../actions/actions\";\n\nasync function registration(email, password) {\n  return await firebase.auth().createUserWithEmailAndPassword(email, password);\n}\n\nexport function* register(action) {\n  const _action$payload = action.payload,\n        password = _action$payload.password,\n        email = _action$payload.email,\n        name = _action$payload.name,\n        history = _action$payload.history;\n\n  try {\n    yield put({\n      type: LOADING\n    });\n    const userData = yield call(registration, email, password);\n    const uid = userData.user.uid;\n    firebase.database().ref(\"\".concat(uid)).push({\n      name,\n      email,\n      conversations: []\n    });\n    firebase.database().ref(\"\".concat(name));\n    yield put({\n      type: STOP_LOADING\n    });\n    alert(\"Registered successfully\");\n    history.push(\"/\");\n  } catch (err) {\n    console.log(err);\n  }\n}\nexport function* update(action) {\n  let data;\n  const _action$data = action.data,\n        name = _action$data.name,\n        email = _action$data.email,\n        message = _action$data.message,\n        subject = _action$data.subject;\n  const uid = firebase.auth().currentUser.uid;\n  const recentPostsRef = firebase.database().ref(\"/\".concat(uid));\n  firebase.database().ref(\"\".concat(uid)).push({\n    email,\n    name,\n    message,\n    subject\n  });\n  yield recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  localStorage.setItem(\"data\", JSON.stringify(data));\n  yield put({\n    data,\n    type: UPDATE_MESSAGES\n  });\n}\n\nasync function authenticateLogin(email, password) {\n  return await firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nfunction* validateLogin(action) {\n  let data, key, name, nameRef;\n  const _action$payload2 = action.payload,\n        email = _action$payload2.email,\n        password = _action$payload2.password,\n        history = _action$payload2.history;\n\n  try {\n    yield call(authenticateLogin, email, password);\n    yield put({\n      type: LOADING\n    });\n    const uid = firebase.auth().currentUser.uid;\n    const recentPostsRef = firebase.database().ref(\"/\".concat(uid));\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    key = Object.keys(data)[0];\n    nameRef = firebase.database().ref(\"/\".concat(uid, \"/\").concat(key, \"/name\"));\n    yield nameRef.once(\"value\").then(snapshot => {\n      name = snapshot.val();\n    });\n    history.push(\"/home\");\n    localStorage.setItem(\"isLogged\", true);\n    localStorage.setItem(\"name\", name);\n    localStorage.setItem(\"email\", email);\n    localStorage.setItem(\"data\", JSON.stringify(data));\n    yield put({\n      data,\n      name,\n      email,\n      type: AUTH_SUCCESS\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: AUTH_FAIL\n    });\n  }\n}\n\nexport default function* rootSaga() {\n  yield takeLatest(AUTH_VALIDATION, validateLogin);\n  yield takeLatest(UPDATE_MESSAGE, update);\n  yield takeLatest(REGISTER, register);\n}","map":{"version":3,"sources":["/home/codebrahma/Documents/live/messages/src/sagas/sagas.js"],"names":["firebase","takeLatest","put","call","AUTH_FAIL","AUTH_SUCCESS","AUTH_VALIDATION","REGISTER","UPDATE_MESSAGES","UPDATE_MESSAGE","LOADING","STOP_LOADING","registration","email","password","auth","createUserWithEmailAndPassword","register","action","payload","name","history","type","userData","uid","user","database","ref","push","conversations","alert","err","console","log","update","data","message","subject","currentUser","recentPostsRef","once","then","snapshot","val","localStorage","setItem","JSON","stringify","authenticateLogin","signInWithEmailAndPassword","validateLogin","key","nameRef","Object","keys","e","rootSaga"],"mappings":"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","sourcesContent":["import firebase from \"firebase\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\nimport { takeLatest, put, call } from \"redux-saga/effects\";\nimport {\n  AUTH_FAIL,\n  AUTH_SUCCESS,\n  AUTH_VALIDATION,\n  REGISTER,\n  UPDATE_MESSAGES,\n  UPDATE_MESSAGE,\n  LOADING,\n  STOP_LOADING\n} from \"../actions/actions\";\n\nasync function registration(email, password) {\n  return await firebase.auth().createUserWithEmailAndPassword(email, password);\n}\n\nexport function* register(action) {\n  const { password, email, name, history } = action.payload;\n  try {\n    yield put({ type: LOADING });\n    const userData = yield call(registration, email, password);\n    const uid = userData.user.uid;\n    firebase\n      .database()\n      .ref(`${uid}`)\n      .push({\n        name,\n        email,\n        conversations: []\n      });\n    firebase.database().ref(`${name}`);\n    yield put({ type: STOP_LOADING });\n    alert(\"Registered successfully\");\n    history.push(\"/\");\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport function* update(action) {\n  let data;\n  const { name, email, message, subject } = action.data;\n  const uid = firebase.auth().currentUser.uid;\n  const recentPostsRef = firebase.database().ref(`/${uid}`);\n  firebase\n    .database()\n    .ref(`${uid}`)\n    .push({\n      email,\n      name,\n      message,\n      subject\n    });\n\n  yield recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  localStorage.setItem(\"data\", JSON.stringify(data));\n  yield put({ data, type: UPDATE_MESSAGES });\n}\n\nasync function authenticateLogin(email, password) {\n  return await firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nfunction* validateLogin(action) {\n  let data, key, name, nameRef;\n  const { email, password, history } = action.payload;\n  try {\n    yield call(authenticateLogin, email, password);\n    yield put({ type: LOADING });\n    const uid = firebase.auth().currentUser.uid;\n    const recentPostsRef = firebase.database().ref(`/${uid}`);\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    key = Object.keys(data)[0];\n    nameRef = firebase.database().ref(`/${uid}/${key}/name`);\n    yield nameRef.once(\"value\").then(snapshot => {\n      name = snapshot.val();\n    });\n    history.push(\"/home\");\n    localStorage.setItem(\"isLogged\", true);\n    localStorage.setItem(\"name\", name);\n    localStorage.setItem(\"email\", email);\n    localStorage.setItem(\"data\", JSON.stringify(data));\n    yield put({ data, name, email, type: AUTH_SUCCESS });\n  } catch (e) {\n    console.log(e);\n    yield put({ type: AUTH_FAIL });\n  }\n}\n\nexport default function* rootSaga() {\n  yield takeLatest(AUTH_VALIDATION, validateLogin);\n  yield takeLatest(UPDATE_MESSAGE, update);\n  yield takeLatest(REGISTER, register);\n}\n"]},"metadata":{},"sourceType":"module"}