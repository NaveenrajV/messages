{"ast":null,"code":"import { takeLatest, put, delay, takeEvery, call } from \"redux-saga/effects\";\nimport { AUTH_FAIL, AUTH_SUCCESS, AUTH_VALIDATION, REGISTER, UPDATE_MESSAGES, UPDATE_MESSAGE, GET_DATA } from \"../actions/actions\";\nimport * as firebase from \"firebase\";\nexport function* register(action) {\n  console.log(\"Register details : \".concat(email, \",\").concat(password));\n  firebase.auth().createUserWithEmailAndPassword(email, password).then(user => console.log(\"Registered successfully\")).catch(err => console.log(\"Error at Register\"));\n}\nexport function* update(action) {\n  console.log(\"Message updated\");\n  console.log(action);\n  const user1 = action.data.name;\n  console.log({\n    [user1]: {\n      email: action.data.email,\n      name: user1,\n      message: action.data.message\n    }\n  });\n  firebase.database().ref(\"details\").push({\n    [user1]: {\n      email: action.data.email,\n      name: user1,\n      message: action.data.message\n    }\n  });\n  let data;\n  const recentPostsRef = firebase.database().ref(\"/details\");\n  yield recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  yield put({\n    data,\n    type: UPDATE_MESSAGES\n  });\n}\n\nasync function authenticateLogin(email, password) {\n  console.log(email, password);\n  return await firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nfunction* validateLogin(action) {\n  const _action$payload = action.payload,\n        email = _action$payload.email,\n        password = _action$payload.password;\n  let data;\n\n  try {\n    yield call(authenticateLogin, email, password);\n    let recentPostsRef = firebase.database().ref(\"/details\");\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    yield put({\n      data,\n      type: AUTH_SUCCESS\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: AUTH_FAIL\n    });\n  }\n  /*if () {\n    console.log(\"AUTH_SUCCESS \");\n    let recentPostsRef = firebase.database().ref(\"/details\");\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    yield put({ data, type: AUTH_SUCCESS });\n  } else yield put({ ...action, type: AUTH_FAIL });\n  */\n\n}\n\nexport default function* rootSaga() {\n  yield takeLatest(AUTH_VALIDATION, validateLogin);\n  yield takeLatest(UPDATE_MESSAGE, update);\n  yield takeLatest(REGISTER, register);\n}","map":{"version":3,"sources":["/home/codebrahma/Documents/Projects/messages/src/sagas/sagas.js"],"names":["takeLatest","put","delay","takeEvery","call","AUTH_FAIL","AUTH_SUCCESS","AUTH_VALIDATION","REGISTER","UPDATE_MESSAGES","UPDATE_MESSAGE","GET_DATA","firebase","register","action","console","log","email","password","auth","createUserWithEmailAndPassword","then","user","catch","err","update","user1","data","name","message","database","ref","push","recentPostsRef","once","snapshot","val","type","authenticateLogin","signInWithEmailAndPassword","validateLogin","payload","e","rootSaga"],"mappings":"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","sourcesContent":["import { takeLatest, put, delay, takeEvery, call } from \"redux-saga/effects\";\nimport {\n  AUTH_FAIL,\n  AUTH_SUCCESS,\n  AUTH_VALIDATION,\n  REGISTER,\n  UPDATE_MESSAGES,\n  UPDATE_MESSAGE,\n  GET_DATA\n} from \"../actions/actions\";\n\nimport * as firebase from \"firebase\";\n\nexport function* register(action) {\n  console.log(`Register details : ${email},${password}`);\n  firebase\n    .auth()\n    .createUserWithEmailAndPassword(email, password)\n    .then(user => console.log(\"Registered successfully\"))\n    .catch(err => console.log(\"Error at Register\"));\n}\n\nexport function* update(action) {\n  console.log(\"Message updated\");\n  console.log(action);\n  const user1 = action.data.name;\n  console.log({\n    [user1]: {\n      email: action.data.email,\n      name: user1,\n      message: action.data.message\n    }\n  });\n\n  firebase\n    .database()\n    .ref(\"details\")\n    .push({\n      [user1]: {\n        email: action.data.email,\n        name: user1,\n        message: action.data.message\n      }\n    });\n\n  let data;\n  const recentPostsRef = firebase.database().ref(\"/details\");\n  yield recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  yield put({ data, type: UPDATE_MESSAGES });\n}\n\nasync function authenticateLogin(email, password) {\n  console.log(email, password);\n  return await firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nfunction* validateLogin(action) {\n  const { email, password } = action.payload;\n  let data;\n  try {\n    yield call(authenticateLogin, email, password);\n    let recentPostsRef = firebase.database().ref(\"/details\");\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    yield put({ data, type: AUTH_SUCCESS });\n  } catch (e) {\n    console.log(e);\n    yield put({ type: AUTH_FAIL });\n  }\n\n  /*if () {\n    console.log(\"AUTH_SUCCESS \");\n    let recentPostsRef = firebase.database().ref(\"/details\");\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    yield put({ data, type: AUTH_SUCCESS });\n  } else yield put({ ...action, type: AUTH_FAIL });\n  */\n}\n\nexport default function* rootSaga() {\n  yield takeLatest(AUTH_VALIDATION, validateLogin);\n  yield takeLatest(UPDATE_MESSAGE, update);\n  yield takeLatest(REGISTER, register);\n}\n"]},"metadata":{},"sourceType":"module"}