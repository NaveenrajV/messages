{"ast":null,"code":"import * as firebase from \"firebase\";\nimport { takeLatest, put, call } from \"redux-saga/effects\";\nimport { AUTH_FAIL, AUTH_SUCCESS, AUTH_VALIDATION, REGISTER, UPDATE_MESSAGES, UPDATE_MESSAGE, LOADING } from \"../actions/actions\";\nexport function register(action) {\n  const _action$payload = action.payload,\n        password = _action$payload.password,\n        email = _action$payload.email;\n  firebase.auth().createUserWithEmailAndPassword(email, password).then(user => console.log(\"Registered successfully\")).catch(err => console.log(err));\n}\nexport function* update(action) {\n  let data;\n  const user = action.data.name;\n  firebase.database().ref(\"details\").push({\n    [user]: {\n      email: action.data.email,\n      name: user,\n      message: action.data.message,\n      subject: action.data.subject\n    }\n  });\n  const recentPostsRef = firebase.database().ref(\"/details\");\n  yield recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  yield put({\n    data,\n    type: UPDATE_MESSAGES\n  });\n  console.log(\"update\");\n}\n\nasync function authenticateLogin(email, password) {\n  console.log(email, password);\n  return await firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nfunction* validateLogin(action) {\n  let data;\n  const _action$payload2 = action.payload,\n        email = _action$payload2.email,\n        password = _action$payload2.password;\n\n  try {\n    yield call(authenticateLogin, email, password);\n    yield put({\n      type: LOADING\n    });\n    const recentPostsRef = firebase.database().ref(\"/details\");\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    yield put({\n      data,\n      type: AUTH_SUCCESS\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: AUTH_FAIL\n    });\n  }\n}\n\nexport default function* rootSaga() {\n  yield takeLatest(AUTH_VALIDATION, validateLogin);\n  yield takeLatest(UPDATE_MESSAGE, update);\n  yield takeLatest(REGISTER, register);\n}","map":{"version":3,"sources":["/home/codebrahma/Documents/Projects/messages/src/sagas/sagas.js"],"names":["firebase","takeLatest","put","call","AUTH_FAIL","AUTH_SUCCESS","AUTH_VALIDATION","REGISTER","UPDATE_MESSAGES","UPDATE_MESSAGE","LOADING","register","action","payload","password","email","auth","createUserWithEmailAndPassword","then","user","console","log","catch","err","update","data","name","database","ref","push","message","subject","recentPostsRef","once","snapshot","val","type","authenticateLogin","signInWithEmailAndPassword","validateLogin","e","rootSaga"],"mappings":"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","sourcesContent":["import * as firebase from \"firebase\";\nimport { takeLatest, put, call } from \"redux-saga/effects\";\nimport {\n  AUTH_FAIL,\n  AUTH_SUCCESS,\n  AUTH_VALIDATION,\n  REGISTER,\n  UPDATE_MESSAGES,\n  UPDATE_MESSAGE,\n  LOADING\n} from \"../actions/actions\";\n\nexport function register(action) {\n  const { password, email } = action.payload;\n  firebase\n    .auth()\n    .createUserWithEmailAndPassword(email, password)\n    .then(user => console.log(\"Registered successfully\"))\n    .catch(err => console.log(err));\n}\n\nexport function* update(action) {\n  let data;\n  const user = action.data.name;\n  firebase\n    .database()\n    .ref(\"details\")\n    .push({\n      [user]: {\n        email: action.data.email,\n        name: user,\n        message: action.data.message,\n        subject: action.data.subject\n      }\n    });\n\n  const recentPostsRef = firebase.database().ref(\"/details\");\n  yield recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  yield put({ data, type: UPDATE_MESSAGES });\n  console.log(\"update\");\n}\n\nasync function authenticateLogin(email, password) {\n  console.log(email, password);\n  return await firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nfunction* validateLogin(action) {\n  let data;\n  const { email, password } = action.payload;\n  try {\n    yield call(authenticateLogin, email, password);\n    yield put({ type: LOADING });\n    const recentPostsRef = firebase.database().ref(\"/details\");\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    yield put({ data, type: AUTH_SUCCESS });\n  } catch (e) {\n    console.log(e);\n    yield put({ type: AUTH_FAIL });\n  }\n}\n\nexport default function* rootSaga() {\n  yield takeLatest(AUTH_VALIDATION, validateLogin);\n  yield takeLatest(UPDATE_MESSAGE, update);\n  yield takeLatest(REGISTER, register);\n}\n"]},"metadata":{},"sourceType":"module"}