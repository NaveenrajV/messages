{"ast":null,"code":"import { takeLatest, put, delay, takeEvery, call } from \"redux-saga/effects\";\nimport { AUTH_FAIL, AUTH_SUCCESS, AUTH_VALIDATION, REGISTER, UPDATE_MESSAGES, UPDATE_MESSAGE, GET_DATA } from \"../actions/actions\";\nimport * as firebase from \"firebase\";\nexport function register(action) {\n  console.log(action.payload);\n  const _action$payload = action.payload,\n        email = _action$payload.email,\n        password = _action$payload.password,\n        name = _action$payload.name;\n  console.log(\"Register details : \".concat(email, \",\").concat(password, \" \").concat(name));\n  const recentPostsRef = firebase.database().ref(\"/\".concat(name));\n  firebase.auth().createUserWithEmailAndPassword(email, password).then(user => console.log(\"Registered successfully\")).catch(err => console.log(\"Error at Register\"));\n}\nexport function* update(action) {\n  console.log(\"Message updated\");\n  console.log(action);\n  const user = action.data.name;\n  console.log({\n    [user]: {\n      email: action.data.email,\n      name: user,\n      message: action.data.message\n    }\n  });\n  firebase.database().ref(\"details\").push({\n    [user]: {\n      email: action.data.email,\n      name: user,\n      message: action.data.message\n    }\n  });\n  let data;\n  const recentPostsRef = firebase.database().ref(\"/details\");\n  yield recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  yield put({\n    data,\n    type: UPDATE_MESSAGES\n  });\n}\n\nasync function authenticateLogin(email, password) {\n  console.log(email, password);\n  return await firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nfunction* validateLogin(action) {\n  const _action$payload2 = action.payload,\n        email = _action$payload2.email,\n        password = _action$payload2.password;\n  let data;\n\n  try {\n    yield call(authenticateLogin, email, password);\n    let recentPostsRef = firebase.database().ref(\"/details\");\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    yield put({\n      data,\n      type: AUTH_SUCCESS\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: AUTH_FAIL\n    });\n  }\n  /*if () {\n    console.log(\"AUTH_SUCCESS \");\n    let recentPostsRef = firebase.database().ref(\"/details\");\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    yield put({ data, type: AUTH_SUCCESS });\n  } else yield put({ ...action, type: AUTH_FAIL });\n  */\n\n}\n\nexport default function* rootSaga() {\n  yield takeLatest(AUTH_VALIDATION, validateLogin);\n  yield takeLatest(UPDATE_MESSAGE, update);\n  yield takeLatest(REGISTER, register);\n}","map":{"version":3,"sources":["/home/codebrahma/Documents/Projects/messages/src/sagas/sagas.js"],"names":["takeLatest","put","delay","takeEvery","call","AUTH_FAIL","AUTH_SUCCESS","AUTH_VALIDATION","REGISTER","UPDATE_MESSAGES","UPDATE_MESSAGE","GET_DATA","firebase","register","action","console","log","payload","email","password","name","recentPostsRef","database","ref","auth","createUserWithEmailAndPassword","then","user","catch","err","update","data","message","push","once","snapshot","val","type","authenticateLogin","signInWithEmailAndPassword","validateLogin","e","rootSaga"],"mappings":"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","sourcesContent":["import { takeLatest, put, delay, takeEvery, call } from \"redux-saga/effects\";\nimport {\n  AUTH_FAIL,\n  AUTH_SUCCESS,\n  AUTH_VALIDATION,\n  REGISTER,\n  UPDATE_MESSAGES,\n  UPDATE_MESSAGE,\n  GET_DATA\n} from \"../actions/actions\";\n\nimport * as firebase from \"firebase\";\n\nexport function register(action) {\n  console.log(action.payload);\n  const { email, password, name } = action.payload;\n  console.log(`Register details : ${email},${password} ${name}`);\n  const recentPostsRef = firebase.database().ref(`/${name}`);\n  firebase\n    .auth()\n    .createUserWithEmailAndPassword(email, password)\n    .then(user => console.log(\"Registered successfully\"))\n    .catch(err => console.log(\"Error at Register\"));\n}\n\nexport function* update(action) {\n  console.log(\"Message updated\");\n  console.log(action);\n  const user = action.data.name;\n  console.log({\n    [user]: {\n      email: action.data.email,\n      name: user,\n      message: action.data.message\n    }\n  });\n\n  firebase\n    .database()\n    .ref(\"details\")\n    .push({\n      [user]: {\n        email: action.data.email,\n        name: user,\n        message: action.data.message\n      }\n    });\n\n  let data;\n  const recentPostsRef = firebase.database().ref(\"/details\");\n  yield recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  yield put({ data, type: UPDATE_MESSAGES });\n}\n\nasync function authenticateLogin(email, password) {\n  console.log(email, password);\n  return await firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nfunction* validateLogin(action) {\n  const { email, password } = action.payload;\n  let data;\n  try {\n    yield call(authenticateLogin, email, password);\n    let recentPostsRef = firebase.database().ref(\"/details\");\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    yield put({ data, type: AUTH_SUCCESS });\n  } catch (e) {\n    console.log(e);\n    yield put({ type: AUTH_FAIL });\n  }\n\n  /*if () {\n    console.log(\"AUTH_SUCCESS \");\n    let recentPostsRef = firebase.database().ref(\"/details\");\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    yield put({ data, type: AUTH_SUCCESS });\n  } else yield put({ ...action, type: AUTH_FAIL });\n  */\n}\n\nexport default function* rootSaga() {\n  yield takeLatest(AUTH_VALIDATION, validateLogin);\n  yield takeLatest(UPDATE_MESSAGE, update);\n  yield takeLatest(REGISTER, register);\n}\n"]},"metadata":{},"sourceType":"module"}