{"ast":null,"code":"import _defineProperty from \"/home/codebrahma/Documents/Projects/messages/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { takeLatest, put, delay, takeEvery, call } from \"redux-saga/effects\";\nimport { AUTH_FAIL, AUTH_SUCCESS, AUTH_VALIDATION, REGISTER, UPDATE_MESSAGES, UPDATE_MESSAGE, GET_DATA } from \"../actions/actions\";\nimport * as firebase from \"firebase\";\n\nfunction* getData() {\n  return data;\n}\n\nexport function* register(action) {\n  yield delay(1000);\n  const _action$payload = action.payload,\n        email = _action$payload.email,\n        password = _action$payload.password;\n  console.log(\"Register details : \".concat(email, \",\").concat(password));\n}\nexport function* update(action) {\n  console.log(\"Message updated\");\n  console.log(action);\n  const user1 = action.data.name;\n  console.log({\n    [user1]: {\n      email: action.data.email,\n      name: user1,\n      message: action.data.message\n    }\n  });\n  firebase.database().ref(\"details\").push({\n    [user1]: {\n      email: action.data.email,\n      name: user1,\n      message: action.data.message\n    }\n  });\n  let data;\n  const recentPostsRef = firebase.database().ref(\"/details\");\n  yield recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  yield put({\n    data,\n    type: UPDATE_MESSAGES\n  });\n}\nexport function* validateLogin(action) {\n  const _action$payload2 = action.payload,\n        email = _action$payload2.email,\n        password = _action$payload2.password;\n  let data;\n\n  if (email === \"a@b.c\" && password === \"123\") {\n    console.log(\"AUTH_success \");\n    var recentPostsRef = firebase.database().ref(\"/details\");\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    yield put({\n      data,\n      type: AUTH_SUCCESS\n    });\n  } else yield put(_objectSpread({}, action, {\n    type: AUTH_FAIL\n  }));\n}\nexport default function* rootSaga() {\n  yield takeLatest(AUTH_VALIDATION, validateLogin);\n  yield takeEvery(GET_DATA, getData);\n  yield takeLatest(UPDATE_MESSAGE, update);\n  yield takeLatest(REGISTER, register);\n}","map":{"version":3,"sources":["/home/codebrahma/Documents/Projects/messages/src/sagas/sagas.js"],"names":["takeLatest","put","delay","takeEvery","call","AUTH_FAIL","AUTH_SUCCESS","AUTH_VALIDATION","REGISTER","UPDATE_MESSAGES","UPDATE_MESSAGE","GET_DATA","firebase","getData","data","register","action","payload","email","password","console","log","update","user1","name","message","database","ref","push","recentPostsRef","once","then","snapshot","val","type","validateLogin","rootSaga"],"mappings":"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","sourcesContent":["import { takeLatest, put, delay, takeEvery, call } from \"redux-saga/effects\";\nimport {\n  AUTH_FAIL,\n  AUTH_SUCCESS,\n  AUTH_VALIDATION,\n  REGISTER,\n  UPDATE_MESSAGES,\n  UPDATE_MESSAGE,\n  GET_DATA\n} from \"../actions/actions\";\n\nimport * as firebase from \"firebase\";\n\nfunction* getData() {\n  return data;\n}\n\nexport function* register(action) {\n  yield delay(1000);\n  const { email, password } = action.payload;\n  console.log(`Register details : ${email},${password}`);\n}\n\nexport function* update(action) {\n  console.log(\"Message updated\");\n  console.log(action);\n  const user1 = action.data.name;\n  console.log({\n    [user1]: {\n      email: action.data.email,\n      name: user1,\n      message: action.data.message\n    }\n  });\n\n  firebase\n    .database()\n    .ref(\"details\")\n    .push({\n      [user1]: {\n        email: action.data.email,\n        name: user1,\n        message: action.data.message\n      }\n    });\n\n  let data;\n  const recentPostsRef = firebase.database().ref(\"/details\");\n  yield recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  yield put({ data, type: UPDATE_MESSAGES });\n}\n\nexport function* validateLogin(action) {\n  const { email, password } = action.payload;\n  let data;\n  if (email === \"a@b.c\" && password === \"123\") {\n    console.log(\"AUTH_success \");\n    var recentPostsRef = firebase.database().ref(\"/details\");\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    yield put({ data, type: AUTH_SUCCESS });\n  } else yield put({ ...action, type: AUTH_FAIL });\n}\n\nexport default function* rootSaga() {\n  yield takeLatest(AUTH_VALIDATION, validateLogin);\n  yield takeEvery(GET_DATA, getData);\n  yield takeLatest(UPDATE_MESSAGE, update);\n  yield takeLatest(REGISTER, register);\n}\n"]},"metadata":{},"sourceType":"module"}