{"ast":null,"code":"import _slicedToArray from \"/home/codebrahma/Documents/Projects/messages/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/codebrahma/Documents/Projects/messages/src/components/Login/Login.js\";\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport classes from \"./Login.module.css\";\nimport { login, register } from \"../../actions/actions\";\nimport \"loaders.css\";\nimport { Spinner } from \"react-spinkit\";\n\nconst Login = props => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        email = _useState2[0],\n        setEmail = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        password = _useState4[0],\n        setPassword = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        name = _useState6[0],\n        setName = _useState6[1];\n\n  const _useState7 = useState(true),\n        _useState8 = _slicedToArray(_useState7, 2),\n        isLogin = _useState8[0],\n        setIsLogin = _useState8[1];\n\n  const reset = () => {\n    setEmail(\"\");\n    setPassword(\"\");\n    setName(\"\");\n  };\n\n  return props.loading ? React.createElement(\"div\", {\n    className: \"loaders\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(Spinner, {\n    name: \"double-bounce\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  })) : React.createElement(\"form\", {\n    onSubmit: event => {\n      event.preventDefault();\n      isLogin ? props.authLogin(email, password) : props.register(name, email, password);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.Login,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, isLogin ? null : React.createElement(React.Fragment, null, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Username \"), React.createElement(\"input\", {\n    className: classes.text,\n    type: \"text\",\n    placeholder: \"Username\",\n    name: \"username\",\n    value: name,\n    onChange: e => setName(e.target.value.trim()),\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Email Id \"), React.createElement(\"input\", {\n    className: classes.text,\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"Email\",\n    value: email,\n    onChange: e => setEmail(e.target.value.trim()),\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Password \"), React.createElement(\"input\", {\n    className: classes.text,\n    type: \"password\",\n    name: \"password\",\n    value: password,\n    placeholder: \"Password\",\n    onChange: e => setPassword(e.target.value),\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), isLogin ? React.createElement(React.Fragment, null, props.loginStatus === \"error\" ? React.createElement(\"center\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Invalid credentials\")) : null, React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Login\"), React.createElement(\"p\", {\n    className: classes.register,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Not registered ?\", React.createElement(\"span\", {\n    style: {\n      fontWeight: \"bold\",\n      cursor: \"pointer\",\n      margin: \"0 5px\"\n    },\n    onClick: () => {\n      setIsLogin(false);\n      reset();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Create an account\"))) : React.createElement(React.Fragment, null, React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Register\"), React.createElement(\"p\", {\n    className: classes.register,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Already have an account?\", React.createElement(\"span\", {\n    style: {\n      fontWeight: \"bold\",\n      cursor: \"pointer\",\n      margin: \"0 5px\"\n    },\n    onClick: () => {\n      setIsLogin(true);\n      reset();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Login here\")))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  authLogin: (email, password) => dispatch(login(email, password)),\n  register: (name, email, password) => dispatch(register(name, email, password))\n});\n\nconst mapStateToProps = state => ({\n  loading: state.loading,\n  loginStatus: state.loginStatus\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/home/codebrahma/Documents/Projects/messages/src/components/Login/Login.js"],"names":["React","useState","connect","classes","login","register","Spinner","Login","props","email","setEmail","password","setPassword","name","setName","isLogin","setIsLogin","reset","loading","event","preventDefault","authLogin","text","e","target","value","trim","loginStatus","error","fontWeight","cursor","margin","mapDispatchToProps","dispatch","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport classes from \"./Login.module.css\";\nimport { login, register } from \"../../actions/actions\";\nimport \"loaders.css\";\nimport { Spinner } from \"react-spinkit\";\n\nconst Login = props => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [isLogin, setIsLogin] = useState(true);\n\n  const reset = () => {\n    setEmail(\"\");\n    setPassword(\"\");\n    setName(\"\");\n  };\n\n  return props.loading ? (\n    <div className=\"loaders\">\n      {/* <div className=\"loader\"> */}\n      {/* <div className=\"loader-inner ball-pulse\"></div> */}\n      <Spinner name=\"double-bounce\" />\n      {/* </div> */}\n    </div>\n  ) : (\n    <form\n      onSubmit={event => {\n        event.preventDefault();\n        isLogin\n          ? props.authLogin(email, password)\n          : props.register(name, email, password);\n      }}\n    >\n      <div className={classes.Login}>\n        {isLogin ? null : (\n          <>\n            <label>Username </label>\n            <input\n              className={classes.text}\n              type=\"text\"\n              placeholder=\"Username\"\n              name=\"username\"\n              value={name}\n              onChange={e => setName(e.target.value.trim())}\n              required\n            />\n          </>\n        )}\n        <label>Email Id </label>\n        <input\n          className={classes.text}\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Email\"\n          value={email}\n          onChange={e => setEmail(e.target.value.trim())}\n          required\n        />\n        <label>Password </label>\n        <input\n          className={classes.text}\n          type=\"password\"\n          name=\"password\"\n          value={password}\n          placeholder=\"Password\"\n          onChange={e => setPassword(e.target.value)}\n          required\n        />\n        {isLogin ? (\n          <>\n            {props.loginStatus === \"error\" ? (\n              <center>\n                <div className={classes.error}>Invalid credentials</div>\n              </center>\n            ) : null}\n            <button>Login</button>\n            <p className={classes.register}>\n              Not registered ?\n              <span\n                style={{\n                  fontWeight: \"bold\",\n                  cursor: \"pointer\",\n                  margin: \"0 5px\"\n                }}\n                onClick={() => {\n                  setIsLogin(false);\n                  reset();\n                }}\n              >\n                Create an account\n              </span>\n            </p>\n          </>\n        ) : (\n          <>\n            <button>Register</button>\n            <p className={classes.register}>\n              Already have an account?\n              <span\n                style={{\n                  fontWeight: \"bold\",\n                  cursor: \"pointer\",\n                  margin: \"0 5px\"\n                }}\n                onClick={() => {\n                  setIsLogin(true);\n                  reset();\n                }}\n              >\n                Login here\n              </span>\n            </p>\n          </>\n        )}\n      </div>\n    </form>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  authLogin: (email, password) => dispatch(login(email, password)),\n  register: (name, email, password) => dispatch(register(name, email, password))\n});\nconst mapStateToProps = state => ({\n  loading: state.loading,\n  loginStatus: state.loginStatus\n});\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Login);\n"]},"metadata":{},"sourceType":"module"}