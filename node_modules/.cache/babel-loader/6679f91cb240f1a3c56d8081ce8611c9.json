{"ast":null,"code":"import firebase from \"firebase\";\nimport { takeLatest, put, call } from \"redux-saga/effects\";\nimport { AUTH_FAIL, AUTH_SUCCESS, AUTH_VALIDATION, REGISTER, UPDATE_MESSAGES, UPDATE_MESSAGE, LOADING } from \"../actions/actions\";\nexport function register(action) {\n  const _action$payload = action.payload,\n        password = _action$payload.password,\n        email = _action$payload.email,\n        name = _action$payload.name;\n  firebase.auth().createUserWithEmailAndPassword(email, password).then(userData => {\n    const uid = userData.user.uid;\n    firebase.database().ref(\"\".concat(uid)).push({\n      name,\n      email,\n      conversations: []\n    });\n    firebase.database().ref(\"\".concat(name));\n  }).catch(err => console.log(err));\n}\nexport function* update(action) {\n  let data;\n  const _action$data = action.data,\n        name = _action$data.name,\n        email = _action$data.email,\n        message = _action$data.message,\n        subject = _action$data.subject;\n  const uid = firebase.auth().currentUser.uid;\n  const recentPostsRef = firebase.database().ref(\"/\".concat(uid));\n  firebase.database().ref(\"\".concat(uid)).push({\n    email,\n    name,\n    message,\n    subject\n  });\n  yield recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  localStorage.setItem(\"data\", JSON.stringify(data));\n  yield put({\n    data,\n    type: UPDATE_MESSAGES\n  });\n}\n\nasync function authenticateLogin(email, password) {\n  return await firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nfunction* validateLogin(action) {\n  let data, key, name, nameRef;\n  const _action$payload2 = action.payload,\n        email = _action$payload2.email,\n        password = _action$payload2.password;\n\n  try {\n    yield call(authenticateLogin, email, password);\n    yield put({\n      type: LOADING\n    });\n    const uid = firebase.auth().currentUser.uid;\n    const recentPostsRef = firebase.database().ref(\"/\".concat(uid));\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    key = Object.keys(data)[0];\n    nameRef = firebase.database().ref(\"/\".concat(uid, \"/\").concat(key, \"/name\"));\n    yield nameRef.once(\"value\").then(snapshot => {\n      name = snapshot.val();\n    });\n    localStorage.setItem(\"isLogged\", true);\n    localStorage.setItem(\"name\", name);\n    localStorage.setItem(\"email\", email);\n    localStorage.setItem(\"data\", JSON.stringify(data));\n    yield put({\n      data,\n      name,\n      email,\n      type: AUTH_SUCCESS\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: AUTH_FAIL\n    });\n  }\n}\n\nexport default function* rootSaga() {\n  yield takeLatest(AUTH_VALIDATION, validateLogin);\n  yield takeLatest(UPDATE_MESSAGE, update);\n  yield takeLatest(REGISTER, register);\n}","map":{"version":3,"sources":["/home/codebrahma/Documents/live/messages/src/sagas/sagas.js"],"names":["firebase","takeLatest","put","call","AUTH_FAIL","AUTH_SUCCESS","AUTH_VALIDATION","REGISTER","UPDATE_MESSAGES","UPDATE_MESSAGE","LOADING","register","action","payload","password","email","name","auth","createUserWithEmailAndPassword","then","userData","uid","user","database","ref","push","conversations","catch","err","console","log","update","data","message","subject","currentUser","recentPostsRef","once","snapshot","val","localStorage","setItem","JSON","stringify","type","authenticateLogin","signInWithEmailAndPassword","validateLogin","key","nameRef","Object","keys","e","rootSaga"],"mappings":"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","sourcesContent":["import firebase from \"firebase\";\nimport { takeLatest, put, call } from \"redux-saga/effects\";\nimport {\n  AUTH_FAIL,\n  AUTH_SUCCESS,\n  AUTH_VALIDATION,\n  REGISTER,\n  UPDATE_MESSAGES,\n  UPDATE_MESSAGE,\n  LOADING\n} from \"../actions/actions\";\n\nexport function register(action) {\n  const { password, email, name } = action.payload;\n  firebase\n    .auth()\n    .createUserWithEmailAndPassword(email, password)\n    .then(userData => {\n      const uid = userData.user.uid;\n      firebase\n        .database()\n        .ref(`${uid}`)\n        .push({\n          name,\n          email,\n          conversations: []\n        });\n      firebase.database().ref(`${name}`);\n    })\n    .catch(err => console.log(err));\n}\n\nexport function* update(action) {\n  let data;\n  const { name, email, message, subject } = action.data;\n  const uid = firebase.auth().currentUser.uid;\n  const recentPostsRef = firebase.database().ref(`/${uid}`);\n  firebase\n    .database()\n    .ref(`${uid}`)\n    .push({\n      email,\n      name,\n      message,\n      subject\n    });\n\n  yield recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  localStorage.setItem(\"data\", JSON.stringify(data));\n  yield put({ data, type: UPDATE_MESSAGES });\n}\n\nasync function authenticateLogin(email, password) {\n  return await firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nfunction* validateLogin(action) {\n  let data, key, name, nameRef;\n  const { email, password } = action.payload;\n  try {\n    yield call(authenticateLogin, email, password);\n    yield put({ type: LOADING });\n    const uid = firebase.auth().currentUser.uid;\n    const recentPostsRef = firebase.database().ref(`/${uid}`);\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    key = Object.keys(data)[0];\n    nameRef = firebase.database().ref(`/${uid}/${key}/name`);\n    yield nameRef.once(\"value\").then(snapshot => {\n      name = snapshot.val();\n    });\n    localStorage.setItem(\"isLogged\", true);\n    localStorage.setItem(\"name\", name);\n    localStorage.setItem(\"email\", email);\n    localStorage.setItem(\"data\", JSON.stringify(data));\n    yield put({ data, name, email, type: AUTH_SUCCESS });\n  } catch (e) {\n    console.log(e);\n    yield put({ type: AUTH_FAIL });\n  }\n}\n\nexport default function* rootSaga() {\n  yield takeLatest(AUTH_VALIDATION, validateLogin);\n  yield takeLatest(UPDATE_MESSAGE, update);\n  yield takeLatest(REGISTER, register);\n}\n"]},"metadata":{},"sourceType":"module"}