{"ast":null,"code":"import firebase from \"firebase\";\nimport { takeLatest, put, call } from \"redux-saga/effects\";\nimport { AUTH_FAIL, AUTH_SUCCESS, AUTH_VALIDATION, REGISTER, UPDATE_MESSAGES, UPDATE_MESSAGE, LOADING, STOP_LOADING } from \"../actions/actions\";\n\nasync function registration(email, password) {\n  return await firebase.auth().createUserWithEmailAndPassword(email, password);\n}\n\nexport function register(action) {\n  const _action$payload = action.payload,\n        password = _action$payload.password,\n        email = _action$payload.email,\n        name = _action$payload.name,\n        history = _action$payload.history;\n  console.log(history);\n  history.push(\"/\"); // try {\n  //   yield put({ type: LOADING });\n  //   const userData = yield call(registration, email, password);\n  //   const uid = userData.user.uid;\n  //   firebase\n  //     .database()\n  //     .ref(`${uid}`)\n  //     .push({\n  //       name,\n  //       email,\n  //       conversations: []\n  //     });\n  //   firebase.database().ref(`${name}`);\n  //   yield put({ type: STOP_LOADING });\n  //   alert(\"Registered successfully\");\n  //   history.push(\"/\");\n  // } catch (err) {\n  //   console.log(err);\n  // }\n}\nexport function* update(action) {\n  let data;\n  const _action$data = action.data,\n        name = _action$data.name,\n        email = _action$data.email,\n        message = _action$data.message,\n        subject = _action$data.subject;\n  const uid = firebase.auth().currentUser.uid;\n  const recentPostsRef = firebase.database().ref(\"/\".concat(uid));\n  firebase.database().ref(\"\".concat(uid)).push({\n    email,\n    name,\n    message,\n    subject\n  });\n  yield recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  localStorage.setItem(\"data\", JSON.stringify(data));\n  yield put({\n    data,\n    type: UPDATE_MESSAGES\n  });\n}\n\nasync function authenticateLogin(email, password) {\n  return await firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nfunction* validateLogin(action) {\n  let data, key, name, nameRef;\n  const _action$payload2 = action.payload,\n        email = _action$payload2.email,\n        password = _action$payload2.password;\n\n  try {\n    yield call(authenticateLogin, email, password);\n    yield put({\n      type: LOADING\n    });\n    const uid = firebase.auth().currentUser.uid;\n    const recentPostsRef = firebase.database().ref(\"/\".concat(uid));\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    key = Object.keys(data)[0];\n    nameRef = firebase.database().ref(\"/\".concat(uid, \"/\").concat(key, \"/name\"));\n    yield nameRef.once(\"value\").then(snapshot => {\n      name = snapshot.val();\n    });\n    localStorage.setItem(\"isLogged\", true);\n    localStorage.setItem(\"name\", name);\n    localStorage.setItem(\"email\", email);\n    localStorage.setItem(\"data\", JSON.stringify(data));\n    yield put({\n      data,\n      name,\n      email,\n      type: AUTH_SUCCESS\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: AUTH_FAIL\n    });\n  }\n}\n\nexport default function* rootSaga() {\n  yield takeLatest(AUTH_VALIDATION, validateLogin);\n  yield takeLatest(UPDATE_MESSAGE, update);\n  yield takeLatest(REGISTER, register);\n}","map":{"version":3,"sources":["/home/codebrahma/Documents/live/messages/src/sagas/sagas.js"],"names":["firebase","takeLatest","put","call","AUTH_FAIL","AUTH_SUCCESS","AUTH_VALIDATION","REGISTER","UPDATE_MESSAGES","UPDATE_MESSAGE","LOADING","STOP_LOADING","registration","email","password","auth","createUserWithEmailAndPassword","register","action","payload","name","history","console","log","push","update","data","message","subject","uid","currentUser","recentPostsRef","database","ref","once","then","snapshot","val","localStorage","setItem","JSON","stringify","type","authenticateLogin","signInWithEmailAndPassword","validateLogin","key","nameRef","Object","keys","e","rootSaga"],"mappings":"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","sourcesContent":["import firebase from \"firebase\";\nimport { takeLatest, put, call } from \"redux-saga/effects\";\nimport {\n  AUTH_FAIL,\n  AUTH_SUCCESS,\n  AUTH_VALIDATION,\n  REGISTER,\n  UPDATE_MESSAGES,\n  UPDATE_MESSAGE,\n  LOADING,\n  STOP_LOADING\n} from \"../actions/actions\";\n\nasync function registration(email, password) {\n  return await firebase.auth().createUserWithEmailAndPassword(email, password);\n}\n\nexport function register(action) {\n  const { password, email, name, history } = action.payload;\n  console.log(history);\n  history.push(\"/\");\n  // try {\n  //   yield put({ type: LOADING });\n  //   const userData = yield call(registration, email, password);\n  //   const uid = userData.user.uid;\n  //   firebase\n  //     .database()\n  //     .ref(`${uid}`)\n  //     .push({\n  //       name,\n  //       email,\n  //       conversations: []\n  //     });\n  //   firebase.database().ref(`${name}`);\n  //   yield put({ type: STOP_LOADING });\n  //   alert(\"Registered successfully\");\n  //   history.push(\"/\");\n  // } catch (err) {\n  //   console.log(err);\n  // }\n}\n\nexport function* update(action) {\n  let data;\n  const { name, email, message, subject } = action.data;\n  const uid = firebase.auth().currentUser.uid;\n  const recentPostsRef = firebase.database().ref(`/${uid}`);\n  firebase\n    .database()\n    .ref(`${uid}`)\n    .push({\n      email,\n      name,\n      message,\n      subject\n    });\n\n  yield recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  localStorage.setItem(\"data\", JSON.stringify(data));\n  yield put({ data, type: UPDATE_MESSAGES });\n}\n\nasync function authenticateLogin(email, password) {\n  return await firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nfunction* validateLogin(action) {\n  let data, key, name, nameRef;\n  const { email, password } = action.payload;\n  try {\n    yield call(authenticateLogin, email, password);\n    yield put({ type: LOADING });\n    const uid = firebase.auth().currentUser.uid;\n    const recentPostsRef = firebase.database().ref(`/${uid}`);\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    key = Object.keys(data)[0];\n    nameRef = firebase.database().ref(`/${uid}/${key}/name`);\n    yield nameRef.once(\"value\").then(snapshot => {\n      name = snapshot.val();\n    });\n    localStorage.setItem(\"isLogged\", true);\n    localStorage.setItem(\"name\", name);\n    localStorage.setItem(\"email\", email);\n    localStorage.setItem(\"data\", JSON.stringify(data));\n    yield put({ data, name, email, type: AUTH_SUCCESS });\n  } catch (e) {\n    console.log(e);\n    yield put({ type: AUTH_FAIL });\n  }\n}\n\nexport default function* rootSaga() {\n  yield takeLatest(AUTH_VALIDATION, validateLogin);\n  yield takeLatest(UPDATE_MESSAGE, update);\n  yield takeLatest(REGISTER, register);\n}\n"]},"metadata":{},"sourceType":"module"}