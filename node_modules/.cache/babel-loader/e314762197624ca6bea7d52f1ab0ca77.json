{"ast":null,"code":"import * as firebase from \"firebase\";\nimport { takeLatest, put, delay, takeEvery, call } from \"redux-saga/effects\";\nimport { AUTH_FAIL, AUTH_SUCCESS, AUTH_VALIDATION, REGISTER, UPDATE_MESSAGES, UPDATE_MESSAGE } from \"../actions/actions\";\nexport function register(action) {\n  console.log(action.payload);\n  const _action$payload = action.payload,\n        name = _action$payload.name,\n        password = _action$payload.password,\n        email = _action$payload.email;\n  console.log(\"Register details : \".concat(email, \",\").concat(password, \" \").concat(name));\n  const recentPostsRef = firebase.database().ref(\"/\".concat(name)); // firebase\n  //   .auth()\n  //   .createUserWithEmailAndPassword(password, email)\n  //   .then(user => console.log(\"Registered successfully\"))\n  //   .catch(err => console.log(err));\n}\nexport function* update(action) {\n  console.log(\"Message updated\");\n  console.log(action);\n  const user = action.data.name;\n  console.log({\n    [user]: {\n      email: action.data.email,\n      name: user,\n      message: action.data.message\n    }\n  });\n  firebase.database().ref(\"details\").push({\n    [user]: {\n      email: action.data.email,\n      name: user,\n      message: action.data.message\n    }\n  });\n  let data;\n  const recentPostsRef = firebase.database().ref(\"/details\");\n  yield recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  yield put({\n    data,\n    type: UPDATE_MESSAGES\n  });\n}\n\nasync function authenticateLogin(email, password) {\n  console.log(email, password);\n  return await firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nfunction* validateLogin(action) {\n  const _action$payload2 = action.payload,\n        email = _action$payload2.email,\n        password = _action$payload2.password;\n  let data;\n\n  try {\n    yield call(authenticateLogin, email, password);\n    let recentPostsRef = firebase.database().ref(\"/details\");\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    yield put({\n      data,\n      type: AUTH_SUCCESS\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: AUTH_FAIL\n    });\n  }\n  /*if () {\n    console.log(\"AUTH_SUCCESS \");\n    let recentPostsRef = firebase.database().ref(\"/details\");\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    yield put({ data, type: AUTH_SUCCESS });\n  } else yield put({ ...action, type: AUTH_FAIL });\n  */\n\n}\n\nexport default function* rootSaga() {\n  yield takeLatest(AUTH_VALIDATION, validateLogin);\n  yield takeLatest(UPDATE_MESSAGE, update);\n  yield takeLatest(REGISTER, register);\n}","map":{"version":3,"sources":["/home/codebrahma/Documents/Projects/messages/src/sagas/sagas.js"],"names":["firebase","takeLatest","put","delay","takeEvery","call","AUTH_FAIL","AUTH_SUCCESS","AUTH_VALIDATION","REGISTER","UPDATE_MESSAGES","UPDATE_MESSAGE","register","action","console","log","payload","name","password","email","recentPostsRef","database","ref","update","user","data","message","push","once","then","snapshot","val","type","authenticateLogin","auth","signInWithEmailAndPassword","validateLogin","e","rootSaga"],"mappings":"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","sourcesContent":["import * as firebase from \"firebase\";\nimport { takeLatest, put, delay, takeEvery, call } from \"redux-saga/effects\";\nimport {\n  AUTH_FAIL,\n  AUTH_SUCCESS,\n  AUTH_VALIDATION,\n  REGISTER,\n  UPDATE_MESSAGES,\n  UPDATE_MESSAGE\n} from \"../actions/actions\";\n\nexport function register(action) {\n  console.log(action.payload);\n  const { name, password, email } = action.payload;\n  console.log(`Register details : ${email},${password} ${name}`);\n  const recentPostsRef = firebase.database().ref(`/${name}`);\n  // firebase\n  //   .auth()\n  //   .createUserWithEmailAndPassword(password, email)\n  //   .then(user => console.log(\"Registered successfully\"))\n  //   .catch(err => console.log(err));\n}\n\nexport function* update(action) {\n  console.log(\"Message updated\");\n  console.log(action);\n  const user = action.data.name;\n  console.log({\n    [user]: {\n      email: action.data.email,\n      name: user,\n      message: action.data.message\n    }\n  });\n\n  firebase\n    .database()\n    .ref(\"details\")\n    .push({\n      [user]: {\n        email: action.data.email,\n        name: user,\n        message: action.data.message\n      }\n    });\n\n  let data;\n  const recentPostsRef = firebase.database().ref(\"/details\");\n  yield recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  yield put({ data, type: UPDATE_MESSAGES });\n}\n\nasync function authenticateLogin(email, password) {\n  console.log(email, password);\n  return await firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nfunction* validateLogin(action) {\n  const { email, password } = action.payload;\n  let data;\n  try {\n    yield call(authenticateLogin, email, password);\n    let recentPostsRef = firebase.database().ref(\"/details\");\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    yield put({ data, type: AUTH_SUCCESS });\n  } catch (e) {\n    console.log(e);\n    yield put({ type: AUTH_FAIL });\n  }\n\n  /*if () {\n    console.log(\"AUTH_SUCCESS \");\n    let recentPostsRef = firebase.database().ref(\"/details\");\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    yield put({ data, type: AUTH_SUCCESS });\n  } else yield put({ ...action, type: AUTH_FAIL });\n  */\n}\n\nexport default function* rootSaga() {\n  yield takeLatest(AUTH_VALIDATION, validateLogin);\n  yield takeLatest(UPDATE_MESSAGE, update);\n  yield takeLatest(REGISTER, register);\n}\n"]},"metadata":{},"sourceType":"module"}