{"ast":null,"code":"import firebase from \"firebase\";\nimport { takeLatest, put, call } from \"redux-saga/effects\";\nimport { AUTH_FAIL, AUTH_SUCCESS, AUTH_VALIDATION, REGISTER, UPDATE_MESSAGES, UPDATE_MESSAGE, LOADING } from \"../actions/actions\";\nexport function register(action) {\n  const _action$payload = action.payload,\n        password = _action$payload.password,\n        email = _action$payload.email,\n        name = _action$payload.name; // firebase\n  //   .auth()\n  //   .createUserWithEmailAndPassword(email, password)\n  //   .then(userData => {\n  //     const uid = userData.user.uid;\n  //     firebase\n  //       .database()\n  //       .ref(`${uid}`)\n  //       .push({\n  //         name,\n  //         email,\n  //         conversations: []\n  //       });\n  //     firebase.database().ref(`${name}`);\n  //     alert(\"Registered successfully\");\n  //   })\n  //   .catch(err => console.log(err));\n\n  alert(\"Registered successfully\");\n}\nexport function* update(action) {\n  let data;\n  const _action$data = action.data,\n        name = _action$data.name,\n        email = _action$data.email,\n        message = _action$data.message,\n        subject = _action$data.subject;\n  const uid = firebase.auth().currentUser.uid;\n  const recentPostsRef = firebase.database().ref(\"/\".concat(uid));\n  firebase.database().ref(\"\".concat(uid)).push({\n    email,\n    name,\n    message,\n    subject\n  });\n  yield recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  localStorage.setItem(\"data\", JSON.stringify(data));\n  yield put({\n    data,\n    type: UPDATE_MESSAGES\n  });\n}\n\nasync function authenticateLogin(email, password) {\n  return await firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nfunction* validateLogin(action) {\n  let data, key, name, nameRef;\n  const _action$payload2 = action.payload,\n        email = _action$payload2.email,\n        password = _action$payload2.password;\n\n  try {\n    yield call(authenticateLogin, email, password);\n    yield put({\n      type: LOADING\n    });\n    const uid = firebase.auth().currentUser.uid;\n    const recentPostsRef = firebase.database().ref(\"/\".concat(uid));\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    key = Object.keys(data)[0];\n    nameRef = firebase.database().ref(\"/\".concat(uid, \"/\").concat(key, \"/name\"));\n    yield nameRef.once(\"value\").then(snapshot => {\n      name = snapshot.val();\n    });\n    localStorage.setItem(\"isLogged\", true);\n    localStorage.setItem(\"name\", name);\n    localStorage.setItem(\"email\", email);\n    localStorage.setItem(\"data\", JSON.stringify(data));\n    yield put({\n      data,\n      name,\n      email,\n      type: AUTH_SUCCESS\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: AUTH_FAIL\n    });\n  }\n}\n\nexport default function* rootSaga() {\n  yield takeLatest(AUTH_VALIDATION, validateLogin);\n  yield takeLatest(UPDATE_MESSAGE, update);\n  yield takeLatest(REGISTER, register);\n}","map":{"version":3,"sources":["/home/codebrahma/Documents/live/messages/src/sagas/sagas.js"],"names":["firebase","takeLatest","put","call","AUTH_FAIL","AUTH_SUCCESS","AUTH_VALIDATION","REGISTER","UPDATE_MESSAGES","UPDATE_MESSAGE","LOADING","register","action","payload","password","email","name","alert","update","data","message","subject","uid","auth","currentUser","recentPostsRef","database","ref","push","once","then","snapshot","val","localStorage","setItem","JSON","stringify","type","authenticateLogin","signInWithEmailAndPassword","validateLogin","key","nameRef","Object","keys","e","console","log","rootSaga"],"mappings":"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","sourcesContent":["import firebase from \"firebase\";\nimport { takeLatest, put, call } from \"redux-saga/effects\";\nimport {\n  AUTH_FAIL,\n  AUTH_SUCCESS,\n  AUTH_VALIDATION,\n  REGISTER,\n  UPDATE_MESSAGES,\n  UPDATE_MESSAGE,\n  LOADING\n} from \"../actions/actions\";\n\nexport function register(action) {\n  const { password, email, name } = action.payload;\n  // firebase\n  //   .auth()\n  //   .createUserWithEmailAndPassword(email, password)\n  //   .then(userData => {\n  //     const uid = userData.user.uid;\n  //     firebase\n  //       .database()\n  //       .ref(`${uid}`)\n  //       .push({\n  //         name,\n  //         email,\n  //         conversations: []\n  //       });\n  //     firebase.database().ref(`${name}`);\n  //     alert(\"Registered successfully\");\n  //   })\n  //   .catch(err => console.log(err));\n  alert(\"Registered successfully\");\n}\n\nexport function* update(action) {\n  let data;\n  const { name, email, message, subject } = action.data;\n  const uid = firebase.auth().currentUser.uid;\n  const recentPostsRef = firebase.database().ref(`/${uid}`);\n  firebase\n    .database()\n    .ref(`${uid}`)\n    .push({\n      email,\n      name,\n      message,\n      subject\n    });\n\n  yield recentPostsRef.once(\"value\").then(snapshot => {\n    data = snapshot.val();\n  });\n  localStorage.setItem(\"data\", JSON.stringify(data));\n  yield put({ data, type: UPDATE_MESSAGES });\n}\n\nasync function authenticateLogin(email, password) {\n  return await firebase.auth().signInWithEmailAndPassword(email, password);\n}\n\nfunction* validateLogin(action) {\n  let data, key, name, nameRef;\n  const { email, password } = action.payload;\n  try {\n    yield call(authenticateLogin, email, password);\n    yield put({ type: LOADING });\n    const uid = firebase.auth().currentUser.uid;\n    const recentPostsRef = firebase.database().ref(`/${uid}`);\n    yield recentPostsRef.once(\"value\").then(snapshot => {\n      data = snapshot.val();\n    });\n    key = Object.keys(data)[0];\n    nameRef = firebase.database().ref(`/${uid}/${key}/name`);\n    yield nameRef.once(\"value\").then(snapshot => {\n      name = snapshot.val();\n    });\n    localStorage.setItem(\"isLogged\", true);\n    localStorage.setItem(\"name\", name);\n    localStorage.setItem(\"email\", email);\n    localStorage.setItem(\"data\", JSON.stringify(data));\n    yield put({ data, name, email, type: AUTH_SUCCESS });\n  } catch (e) {\n    console.log(e);\n    yield put({ type: AUTH_FAIL });\n  }\n}\n\nexport default function* rootSaga() {\n  yield takeLatest(AUTH_VALIDATION, validateLogin);\n  yield takeLatest(UPDATE_MESSAGE, update);\n  yield takeLatest(REGISTER, register);\n}\n"]},"metadata":{},"sourceType":"module"}